"""
Snakefile for running sstar pipeline.
"""

import os

libr_dir = os.environ["CONDA_PREFIX"] + "/lib/R/library"


rule all:
    input:
        "results/sstar.example.src1.bed",
        "results/sstar.example.src2.bed",


rule score:
    input:
        vcf = "../data/real_data/sstar.example.biallelic.snps.vcf.gz",
        ref_ind = "../data/ind_list/ref.ind.list",
        tgt_ind = "../data/ind_list/tgt.ind.list"
    output: 
        "results/sstar.example.score.txt"
    resources: nodes=1, ntasks=1, time_min=60, mem_mb=5000, cpus=1
    threads: 1
    shell:
        """
        sstar score --vcf {input.vcf} --ref {input.ref_ind} --tgt {input.tgt_ind} --output {output[0]} --thread {threads}
        """


rule nean_match_rate:
    input:
        vcf = "../data/real_data/sstar.example.biallelic.snps.vcf.gz",
        ref_ind = "../data/ind_list/ref.ind.list",
        tgt_ind = "../data/ind_list/tgt.ind.list",
        src_ind = "../data/ind_list/nean.ind.list",
        score_file = rules.score.output,
    output:
        "results/sstar.example.nean.match.rate.txt"
    resources: nodes=1, ntasks=2, time_min=3000, mem_mb=30000, cpus=1
    threads: 1
    shell:
        """
        sstar matchrate --vcf {input.vcf} --ref {input.ref_ind} --tgt {input.tgt_ind} --src {input.src_ind} --score {input.score_file} --thread {threads} --output {output[0]}
        """


rule den_match_rate:
    input:
        vcf = "../data/real_data/sstar.example.biallelic.snps.vcf.gz",
        ref_ind = "../data/ind_list/ref.ind.list",
        tgt_ind = "../data/ind_list/tgt.ind.list",
        src_ind = "../data/ind_list/den.ind.list",
        score_file = rules.score.output,
    output:
        "results/sstar.example.den.match.rate.txt"
    resources: nodes=1, ntasks=2, time_min=3000, mem_mb=30000, cpus=1
    threads: 1
    shell:
        """
        sstar matchrate --vcf {input.vcf} --ref {input.ref_ind} --tgt {input.tgt_ind} --src {input.src_ind} --score {input.score_file} --thread {threads} --output {output[0]}
        """


rule threshold:
    input:
        score_file = rules.score.output,
        sim_data = "../data/simulated_data/gravel_asn_scale_60k.simulated.data",
        recomb_map = "../data/real_data/hum.windows.50k.10k.recomb.map"
    output:
        "results/sstar.example.threshold.txt"
    resources: nodes=1, ntasks=1, time_min=60, mem_mb=5000, cpus=1
    params:
        R_LIBS = libr_dir,
        quantile = 0.99
    shell:
        """
        export R_LIBS={params.R_LIBS}
        sstar threshold --score {input.score_file} --sim-data {input.sim_data} --recomb-map {input.recomb_map} --quantile {params.quantile} --output {output[0]}
        """


rule get_tract:
    input:
        threshold = rules.threshold.output[0],
        src1_match_rate = rules.nean_match_rate.output[0],
        src2_match_rate = rules.den_match_rate.output[0],
    output:
        "results/sstar.example.src1.bed",
        "results/sstar.example.src2.bed",
    shell:
        """
        sstar tract --threshold {input.threshold} --match-rate {input.src1_match_rate} {input.src2_match_rate} --output-prefix "results/sstar.example"
        """


rule clean:
    shell:
        """
        rm -r results
        rm -r .snakemake
        """
